import{d as o,j as e}from"./index-bSMqEh1w.js";const d={title:"Sequence - Web3 Gaming Platform - Unreal SDK Built-In GUI",description:"Documentation for Unreal SDK Built-In GUI for the Sequence infrastructure stack for web3 gaming."};function i(n){const t={a:"a",aside:"aside",code:"code",div:"div",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",...o(),...n.components};return e.jsxs(e.Fragment,{children:[e.jsx(t.header,{children:e.jsxs(t.h1,{id:"built-in-gui",children:["Built-In GUI",e.jsx(t.a,{"aria-hidden":"true",tabIndex:"-1",href:"#built-in-gui",children:e.jsx(t.div,{"data-autolink-icon":!0})})]})}),`
`,e.jsxs(t.h2,{id:"before-starting",children:["Before Starting:",e.jsx(t.a,{"aria-hidden":"true",tabIndex:"-1",href:"#before-starting",children:e.jsx(t.div,{"data-autolink-icon":!0})})]}),`
`,e.jsxs(t.p,{children:["You can simply duplicate the ",e.jsx(t.code,{children:"[BP_CustomSpectatorPawn]"})," but since it and its parent class reside within the realm of the plugin, during updates all modifications you make within the plugin could potentially be lost. These are here as a reference for how things should be done. We recommend you duplicate the ",e.jsx(t.code,{children:"BP_CustomSpectatorPawn"})," out of the plugin folder, then update its parent class to a C++ class of your own making that also resides outside the plugins content folder."]}),`
`,e.jsxs(t.p,{children:["Some additional setup of the GameMode will need to be done prior to any UI showing up. The SequencePlugin comes bundled with an example GameMode ",e.jsx(t.code,{children:"[GM_Sequence]"})," stored within ",e.jsx(t.code,{children:"[Demonstration]"})," in the plugin content folder. Duplicate this GameMode and move it outside the plugin folder. Then open up ",e.jsx(t.code,{children:"[GM_Sequence]"})," and set the DefaultPawn to the Pawn Blueprint you've just made."]}),`
`,e.jsxs(t.p,{children:["Lastly in Project Settings you'll need to set this GameMode as the default GameMode. Specifically in ",e.jsx(t.code,{children:"ProjectSettings -> Maps & Modes"})]}),`
`,e.jsx(t.aside,{"data-callout":"tip",children:e.jsx(t.p,{children:"Try running your project now! You should be able to log in using your social credentials if you've set everything up correctly so far!"})}),`
`,e.jsxs(t.h3,{id:"customizing-the-built-in-gui",children:["Customizing the built-in GUI",e.jsx(t.a,{"aria-hidden":"true",tabIndex:"-1",href:"#customizing-the-built-in-gui",children:e.jsx(t.div,{"data-autolink-icon":!0})})]}),`
`,e.jsxs(t.p,{children:["In the folder located at ",e.jsx(t.em,{children:"SequencePlugin Content/Core/Style"})," you'll find a struct ",e.jsx(t.code,{children:"F_SequenceUIStyle"}),". In the default values section of this struct you'll be able to update the colours and images displayed throughout the UI. Currently we only read from ",e.jsx(t.code,{children:"Sequence_Style_Dark_Mode"})]})]})}function r(n={}){const{wrapper:t}={...o(),...n.components};return t?e.jsx(t,{...n,children:e.jsx(i,{...n})}):i(n)}export{r as default,d as frontmatter};
